// let a = new frac(
//     [
//         [
//             ["pi", 1],
//             [3, 2],
//             ["pi", 2],
//             [24, new frac(1, 2)],
//             [100, new frac(1, 9)],
//             [new frac(1, 2), new frac(2, 5)],
//         ],
//         [
//             [10, new frac(1, 9)],
//             [6, new frac(1, 2)],
//             [7, new frac(2, 3)],
//             [8, new frac(2, 3)],
//             ["pi"],
//         ],
//     ],
//     [
//         [
//             [3, 2],
//             ["pi", 4],
//             [23, new frac(1, 3)],
//             [30, new frac(1, 2)],
//             [8, new frac(1, 9)]
//         ],
//     ]
// );

// let a = new frac(
//     [
//         [
//             // [2, new frac(1, 2)],
//             // [3, new frac(1, 2)],
//             [48, new frac(1, 2)],

//         ]
//     ],
//     [
//         [
//             [1]
//         ]
//     ]
// )

// a = new frac(
//     [
//         [
//             [new frac([
//                 [
//                     [25]
//                 ], [
//                     [-10],
//                     [5, new frac(2, 1)]
//                 ]
//             ], [
//                 [
//                     [1, 1]
//                 ]
//             ], { flag: 'under root' }), new frac(1, 2)]
//         ]
//     ],
//     [
//         [
//             [5]
//         ]
//     ], { renderInput: true })


// a = new frac([
//     [
//         [25]
//     ], [
//         [10],
//         [new frac([
//             [
//                 [2],
//                 ['pi']
//             ]
//         ], [
//             [
//                 [3]
//             ]
//         ], { func: 'cos' })]
//     ]
// ], [
//     [
//         [3, new frac(2, 3)]
//     ]
// ], { flag: 'under root', renderInput: true })


const a = new frac([
    [
        ['pi']
    ]
], [
    [
        [2, new frac(1, 2)]
    ]
])

const b = new frac([
    [
        ['pi', 2],
        [2, new frac(1, 2)]
    ], [
        [4],
        [2, new frac(1, 2)]
    ]
], [
    [
        [1, 1]
    ]
])


// const result = [];
            // const ndArray = [a.n, a.d];
            // for (let ndI in ndArray) {
            //     const nd = ndArray[ndI];
            //     const newNd = []
            //     for (let termI in nd) {
            //         const term = nd[termI];
            //         const newTerm = [];
            //         for (let factorI in term) {
            //             const factor = term[factorI];
            //             newTerm.push([factor[0], fracTwoMultiply(factor[1], b)])
            //         }
            //         newNd.push(newTerm);
            //     }
            //     result.push(newNd)
            // }
            // const f = new frac(result[0], result[1])
            // f.testRender





            //     a = new frac(
    //     [
    //         [
    //             ['pi']
    //         ]
    //     ],
    //     [
    //         [
    //             [3, 1]
    //         ]
    //     ],
    //     { func: 'cos', flag: 'wassup' }
    // );

    // a = new frac([
    //     [
    //         [25]
    //     ], [
    //         [10],
    //         [new frac([
    //             [
    //                 [3],
    //                 ['pi']
    //             ]
    //         ], [
    //             [
    //                 [10]
    //             ]
    //         ], { func: 'cos' })]
    //     ]
    // ], [
    //     [
    //         [3, new frac(2, 3)]
    //     ]
    // ], { flag: 'under root' })

    // b = new frac([
    //     [
    //         [25]
    //     ], [
    //         [10],
    //         [new frac([
    //             [
    //                 [3],
    //                 ['pi']
    //             ]
    //         ], [
    //             [
    //                 [10]
    //             ]
    //         ], { func: 'cos' , doNotProcess: true})]
    //     ]
    // ], [
    //     [
    //         [3, new frac(2, 3)]
    //     ]
    // ], { flag: 'under root'})

    // b.testRender('')
    // a.testRender('=')





    // for (let ndI in ndArray) {
            //     const nd = ndArray[ndI]
            //     for (let termI in nd) {
            //         const term = nd[termI];
            //         if (parseInt(ndI) === 0 && parseInt(termI) === 0)
            //             commonFactors = [...term];
            //         else {
            //             const tmp = firstElIn2dArr(term);
            //             const tmp2 = firstElIn2dArr(commonFactors);
            //             const filteredArray = cloneObj(
            //                 commonFactors.filter(
            //                     (x) => indexOfObj(tmp, x[0]) + 1
            //                 )
            //             );
            //             for (let i of filteredArray) {
            //                 i[1] = term[indexOfObj(tmp, i[0])][1];
            //                 const commonFactorsIndex = indexOfObj(tmp2, i[0])
            //                 if (
            //                     fracGreater(i[1], commonFactors[commonFactorsIndex][1])
            //                 ) {
            //                     // console.log(`keeping second`)
            //                     i[1] = commonFactors[commonFactorsIndex][1];
            //                 }
            //             }
            //             commonFactors = filteredArray;
            //         }
            //     }
            // }